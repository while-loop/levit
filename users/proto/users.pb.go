// Code generated by protoc-gen-go. DO NOT EDIT.
// source: users.proto

/*
Package users is a generated protocol buffer package.

It is generated from these files:
	users.proto

It has these top-level messages:
	GetRequest
	User
	Token
	Response
*/
package users

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetRequest struct {
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetRequest) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type User struct {
	Id         uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	First      string `protobuf:"bytes,2,opt,name=first" json:"first,omitempty"`
	Last       string `protobuf:"bytes,3,opt,name=last" json:"last,omitempty"`
	CreatedAt  int64  `protobuf:"varint,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Deleted    bool   `protobuf:"varint,5,opt,name=deleted" json:"deleted,omitempty"`
	GoogleId   string `protobuf:"bytes,6,opt,name=google_id,json=googleId" json:"google_id,omitempty"`
	FacebookId string `protobuf:"bytes,7,opt,name=facebook_id,json=facebookId" json:"facebook_id,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *User) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *User) GetLast() string {
	if m != nil {
		return m.Last
	}
	return ""
}

func (m *User) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *User) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *User) GetGoogleId() string {
	if m != nil {
		return m.GoogleId
	}
	return ""
}

func (m *User) GetFacebookId() string {
	if m != nil {
		return m.FacebookId
	}
	return ""
}

type Token struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Valid bool   `protobuf:"varint,2,opt,name=valid" json:"valid,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Token) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

type Response struct {
	User  *User   `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Users []*User `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Response) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Response) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "users.GetRequest")
	proto.RegisterType((*User)(nil), "users.User")
	proto.RegisterType((*Token)(nil), "users.Token")
	proto.RegisterType((*Response)(nil), "users.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Users service

type UsersClient interface {
	Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
	GetAll(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error)
	Auth(ctx context.Context, in *User, opts ...grpc.CallOption) (*Token, error)
	ValidateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/users.Users/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Get(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/users.Users/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/users.Users/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetAll(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/users.Users/GetAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Auth(ctx context.Context, in *User, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := grpc.Invoke(ctx, "/users.Users/Auth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ValidateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := grpc.Invoke(ctx, "/users.Users/ValidateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Users service

type UsersServer interface {
	Create(context.Context, *User) (*Response, error)
	Get(context.Context, *User) (*Response, error)
	Update(context.Context, *User) (*Response, error)
	GetAll(context.Context, *GetRequest) (*Response, error)
	Auth(context.Context, *User) (*Token, error)
	ValidateToken(context.Context, *Token) (*Token, error)
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Create(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Get(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Update(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetAll(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Auth(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ValidateToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "users.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Users_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Users_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Users_Update_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Users_GetAll_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Users_Auth_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _Users_ValidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}

func init() { proto.RegisterFile("users.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xdd, 0x6e, 0xd3, 0x40,
	0x10, 0x85, 0xbb, 0xfe, 0x6b, 0x32, 0xe1, 0x77, 0xc4, 0xc5, 0x0a, 0x04, 0x35, 0x46, 0x48, 0x96,
	0x10, 0xbe, 0x68, 0x9f, 0x20, 0xe5, 0x22, 0xea, 0x0d, 0x42, 0x2b, 0xca, 0x6d, 0xe5, 0x64, 0xa7,
	0xc9, 0xaa, 0x4b, 0x37, 0x78, 0x27, 0xe5, 0x0d, 0x78, 0x25, 0x5e, 0x0f, 0xed, 0xae, 0x23, 0x68,
	0x84, 0x04, 0x77, 0xf3, 0x9d, 0x73, 0x32, 0x19, 0x1f, 0x1b, 0x66, 0x3b, 0x4f, 0x83, 0xef, 0xb6,
	0x83, 0x63, 0x87, 0x65, 0x84, 0xe6, 0x15, 0xc0, 0x82, 0x58, 0xd1, 0xb7, 0x1d, 0x79, 0xc6, 0x27,
	0x90, 0x1b, 0xed, 0xa5, 0xa8, 0xf3, 0xb6, 0x50, 0x61, 0x6c, 0x7e, 0x0a, 0x28, 0x2e, 0x3d, 0x0d,
	0xf8, 0x08, 0x32, 0xa3, 0xa5, 0xa8, 0x45, 0x5b, 0xa8, 0xcc, 0x68, 0x7c, 0x06, 0xe5, 0xb5, 0x19,
	0x3c, 0xcb, 0xac, 0x16, 0xed, 0x54, 0x25, 0x40, 0x84, 0xc2, 0xf6, 0x9e, 0x65, 0x1e, 0xc5, 0x38,
	0xe3, 0x4b, 0x80, 0xd5, 0x40, 0x3d, 0x93, 0xbe, 0xea, 0x59, 0x16, 0xb5, 0x68, 0x73, 0x35, 0x1d,
	0x95, 0x39, 0xa3, 0x84, 0x63, 0x4d, 0x96, 0x98, 0xb4, 0x2c, 0x6b, 0xd1, 0x4e, 0xd4, 0x1e, 0xf1,
	0x05, 0x4c, 0xd7, 0xce, 0xad, 0x2d, 0x5d, 0x19, 0x2d, 0xab, 0xb8, 0x71, 0x92, 0x84, 0x0b, 0x8d,
	0x27, 0x30, 0xbb, 0xee, 0x57, 0xb4, 0x74, 0xee, 0x26, 0xd8, 0xc7, 0xd1, 0x86, 0xbd, 0x74, 0xa1,
	0x9b, 0x33, 0x28, 0x3f, 0xbb, 0x1b, 0xba, 0x0d, 0x97, 0x72, 0x18, 0xe2, 0xf1, 0x53, 0x95, 0x20,
	0xa8, 0x77, 0xbd, 0x35, 0x3a, 0xde, 0x3f, 0x51, 0x09, 0x9a, 0x8f, 0x30, 0x51, 0xe4, 0xb7, 0xee,
	0xd6, 0x13, 0x9e, 0x40, 0x11, 0x3a, 0x8a, 0x3f, 0x9b, 0x9d, 0xce, 0xba, 0xd4, 0x5e, 0x28, 0x43,
	0x45, 0x03, 0x5f, 0x43, 0x2a, 0x51, 0x66, 0x75, 0x7e, 0x98, 0x48, 0xce, 0xe9, 0x8f, 0x0c, 0xca,
	0xc0, 0x1e, 0x5b, 0xa8, 0x3e, 0xc4, 0x67, 0xc6, 0x3f, 0x73, 0xcf, 0x1f, 0x8f, 0xb0, 0xff, 0xd7,
	0xe6, 0x08, 0xdf, 0x42, 0xbe, 0x20, 0xfe, 0x67, 0xac, 0x85, 0xea, 0x72, 0xab, 0xff, 0x67, 0x61,
	0x07, 0xd5, 0x82, 0x78, 0x6e, 0x2d, 0x3e, 0x1d, 0xcd, 0xdf, 0xaf, 0xfc, 0x6f, 0xf9, 0x37, 0x50,
	0xcc, 0x77, 0xbc, 0xb9, 0xbf, 0xf7, 0xc1, 0x08, 0xb1, 0xd3, 0xe6, 0x08, 0xdf, 0xc3, 0xc3, 0x2f,
	0xa1, 0xb2, 0x9e, 0x29, 0xd5, 0x7c, 0x2f, 0x70, 0x18, 0x3f, 0x7f, 0x07, 0xf5, 0xca, 0x7d, 0xed,
	0xd6, 0x86, 0x37, 0xbb, 0x65, 0xf7, 0x7d, 0x63, 0x2c, 0x59, 0xe7, 0xb6, 0x9d, 0xa5, 0x3b, 0xc3,
	0xe9, 0x93, 0x3c, 0x4f, 0x4d, 0x7d, 0x12, 0xcb, 0x2a, 0xf2, 0xd9, 0xaf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xbd, 0xe3, 0xb1, 0xfe, 0xb1, 0x02, 0x00, 0x00,
}
