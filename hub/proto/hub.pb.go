// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hub.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	hub.proto

It has these top-level messages:
	HubMessage
	EventTyping
	EventMessage
	EventUserAdded
	EventUserRemoved
	EventChannelSeen
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type HubMessage struct {
	Uid  uint64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*HubMessage_EventTyping
	//	*HubMessage_EventMessage
	//	*HubMessage_EventUserAdded
	//	*HubMessage_EventUserRemoved
	//	*HubMessage_EventChannelSeen
	Event isHubMessage_Event `protobuf_oneof:"event"`
}

func (m *HubMessage) Reset()                    { *m = HubMessage{} }
func (m *HubMessage) String() string            { return proto1.CompactTextString(m) }
func (*HubMessage) ProtoMessage()               {}
func (*HubMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isHubMessage_Event interface {
	isHubMessage_Event()
}

type HubMessage_EventTyping struct {
	EventTyping *EventTyping `protobuf:"bytes,3,opt,name=eventTyping,oneof"`
}
type HubMessage_EventMessage struct {
	EventMessage *EventMessage `protobuf:"bytes,4,opt,name=eventMessage,oneof"`
}
type HubMessage_EventUserAdded struct {
	EventUserAdded *EventUserAdded `protobuf:"bytes,5,opt,name=eventUserAdded,oneof"`
}
type HubMessage_EventUserRemoved struct {
	EventUserRemoved *EventUserRemoved `protobuf:"bytes,6,opt,name=eventUserRemoved,oneof"`
}
type HubMessage_EventChannelSeen struct {
	EventChannelSeen *EventChannelSeen `protobuf:"bytes,7,opt,name=eventChannelSeen,oneof"`
}

func (*HubMessage_EventTyping) isHubMessage_Event()      {}
func (*HubMessage_EventMessage) isHubMessage_Event()     {}
func (*HubMessage_EventUserAdded) isHubMessage_Event()   {}
func (*HubMessage_EventUserRemoved) isHubMessage_Event() {}
func (*HubMessage_EventChannelSeen) isHubMessage_Event() {}

func (m *HubMessage) GetEvent() isHubMessage_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *HubMessage) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *HubMessage) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *HubMessage) GetEventTyping() *EventTyping {
	if x, ok := m.GetEvent().(*HubMessage_EventTyping); ok {
		return x.EventTyping
	}
	return nil
}

func (m *HubMessage) GetEventMessage() *EventMessage {
	if x, ok := m.GetEvent().(*HubMessage_EventMessage); ok {
		return x.EventMessage
	}
	return nil
}

func (m *HubMessage) GetEventUserAdded() *EventUserAdded {
	if x, ok := m.GetEvent().(*HubMessage_EventUserAdded); ok {
		return x.EventUserAdded
	}
	return nil
}

func (m *HubMessage) GetEventUserRemoved() *EventUserRemoved {
	if x, ok := m.GetEvent().(*HubMessage_EventUserRemoved); ok {
		return x.EventUserRemoved
	}
	return nil
}

func (m *HubMessage) GetEventChannelSeen() *EventChannelSeen {
	if x, ok := m.GetEvent().(*HubMessage_EventChannelSeen); ok {
		return x.EventChannelSeen
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HubMessage) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _HubMessage_OneofMarshaler, _HubMessage_OneofUnmarshaler, _HubMessage_OneofSizer, []interface{}{
		(*HubMessage_EventTyping)(nil),
		(*HubMessage_EventMessage)(nil),
		(*HubMessage_EventUserAdded)(nil),
		(*HubMessage_EventUserRemoved)(nil),
		(*HubMessage_EventChannelSeen)(nil),
	}
}

func _HubMessage_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*HubMessage)
	// event
	switch x := m.Event.(type) {
	case *HubMessage_EventTyping:
		b.EncodeVarint(3<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.EventTyping); err != nil {
			return err
		}
	case *HubMessage_EventMessage:
		b.EncodeVarint(4<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.EventMessage); err != nil {
			return err
		}
	case *HubMessage_EventUserAdded:
		b.EncodeVarint(5<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.EventUserAdded); err != nil {
			return err
		}
	case *HubMessage_EventUserRemoved:
		b.EncodeVarint(6<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.EventUserRemoved); err != nil {
			return err
		}
	case *HubMessage_EventChannelSeen:
		b.EncodeVarint(7<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.EventChannelSeen); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HubMessage.Event has unexpected type %T", x)
	}
	return nil
}

func _HubMessage_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*HubMessage)
	switch tag {
	case 3: // event.eventTyping
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(EventTyping)
		err := b.DecodeMessage(msg)
		m.Event = &HubMessage_EventTyping{msg}
		return true, err
	case 4: // event.eventMessage
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(EventMessage)
		err := b.DecodeMessage(msg)
		m.Event = &HubMessage_EventMessage{msg}
		return true, err
	case 5: // event.eventUserAdded
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(EventUserAdded)
		err := b.DecodeMessage(msg)
		m.Event = &HubMessage_EventUserAdded{msg}
		return true, err
	case 6: // event.eventUserRemoved
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(EventUserRemoved)
		err := b.DecodeMessage(msg)
		m.Event = &HubMessage_EventUserRemoved{msg}
		return true, err
	case 7: // event.eventChannelSeen
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(EventChannelSeen)
		err := b.DecodeMessage(msg)
		m.Event = &HubMessage_EventChannelSeen{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HubMessage_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*HubMessage)
	// event
	switch x := m.Event.(type) {
	case *HubMessage_EventTyping:
		s := proto1.Size(x.EventTyping)
		n += proto1.SizeVarint(3<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *HubMessage_EventMessage:
		s := proto1.Size(x.EventMessage)
		n += proto1.SizeVarint(4<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *HubMessage_EventUserAdded:
		s := proto1.Size(x.EventUserAdded)
		n += proto1.SizeVarint(5<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *HubMessage_EventUserRemoved:
		s := proto1.Size(x.EventUserRemoved)
		n += proto1.SizeVarint(6<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *HubMessage_EventChannelSeen:
		s := proto1.Size(x.EventChannelSeen)
		n += proto1.SizeVarint(7<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Start and finish of use typing.
type EventTyping struct {
	Started bool `protobuf:"varint,1,opt,name=started" json:"started,omitempty"`
}

func (m *EventTyping) Reset()                    { *m = EventTyping{} }
func (m *EventTyping) String() string            { return proto1.CompactTextString(m) }
func (*EventTyping) ProtoMessage()               {}
func (*EventTyping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EventTyping) GetStarted() bool {
	if m != nil {
		return m.Started
	}
	return false
}

// Regular message from user
type EventMessage struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *EventMessage) Reset()                    { *m = EventMessage{} }
func (m *EventMessage) String() string            { return proto1.CompactTextString(m) }
func (*EventMessage) ProtoMessage()               {}
func (*EventMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EventMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Group OP
type EventUserAdded struct {
}

func (m *EventUserAdded) Reset()                    { *m = EventUserAdded{} }
func (m *EventUserAdded) String() string            { return proto1.CompactTextString(m) }
func (*EventUserAdded) ProtoMessage()               {}
func (*EventUserAdded) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// Group OP
type EventUserRemoved struct {
}

func (m *EventUserRemoved) Reset()                    { *m = EventUserRemoved{} }
func (m *EventUserRemoved) String() string            { return proto1.CompactTextString(m) }
func (*EventUserRemoved) ProtoMessage()               {}
func (*EventUserRemoved) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// Chat OP. User has entered the chat
type EventChannelSeen struct {
}

func (m *EventChannelSeen) Reset()                    { *m = EventChannelSeen{} }
func (m *EventChannelSeen) String() string            { return proto1.CompactTextString(m) }
func (*EventChannelSeen) ProtoMessage()               {}
func (*EventChannelSeen) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto1.RegisterType((*HubMessage)(nil), "proto.HubMessage")
	proto1.RegisterType((*EventTyping)(nil), "proto.EventTyping")
	proto1.RegisterType((*EventMessage)(nil), "proto.EventMessage")
	proto1.RegisterType((*EventUserAdded)(nil), "proto.EventUserAdded")
	proto1.RegisterType((*EventUserRemoved)(nil), "proto.EventUserRemoved")
	proto1.RegisterType((*EventChannelSeen)(nil), "proto.EventChannelSeen")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hub service

type HubClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (Hub_ConnectClient, error)
}

type hubClient struct {
	cc *grpc.ClientConn
}

func NewHubClient(cc *grpc.ClientConn) HubClient {
	return &hubClient{cc}
}

func (c *hubClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Hub_ConnectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hub_serviceDesc.Streams[0], c.cc, "/proto.Hub/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubConnectClient{stream}
	return x, nil
}

type Hub_ConnectClient interface {
	Send(*HubMessage) error
	Recv() (*HubMessage, error)
	grpc.ClientStream
}

type hubConnectClient struct {
	grpc.ClientStream
}

func (x *hubConnectClient) Send(m *HubMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hubConnectClient) Recv() (*HubMessage, error) {
	m := new(HubMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Hub service

type HubServer interface {
	Connect(Hub_ConnectServer) error
}

func RegisterHubServer(s *grpc.Server, srv HubServer) {
	s.RegisterService(&_Hub_serviceDesc, srv)
}

func _Hub_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HubServer).Connect(&hubConnectServer{stream})
}

type Hub_ConnectServer interface {
	Send(*HubMessage) error
	Recv() (*HubMessage, error)
	grpc.ServerStream
}

type hubConnectServer struct {
	grpc.ServerStream
}

func (x *hubConnectServer) Send(m *HubMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hubConnectServer) Recv() (*HubMessage, error) {
	m := new(HubMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Hub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Hub",
	HandlerType: (*HubServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Hub_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hub.proto",
}

func init() { proto1.RegisterFile("hub.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0x5d, 0x4b, 0xf3, 0x30,
	0x14, 0x6e, 0xf6, 0xd5, 0x77, 0x67, 0x63, 0xf4, 0x3d, 0x22, 0x06, 0xaf, 0x46, 0x6e, 0xec, 0xd5,
	0x90, 0x89, 0x82, 0x20, 0x88, 0x8e, 0x41, 0x6e, 0xbc, 0x89, 0xfa, 0x03, 0x5a, 0x73, 0xd8, 0x06,
	0x2e, 0x1d, 0x6b, 0x3a, 0xf0, 0xc7, 0x0b, 0xb2, 0xac, 0xeb, 0xb2, 0xf6, 0xaa, 0x39, 0xcf, 0x57,
	0x9b, 0xe7, 0x14, 0xfa, 0xcb, 0x22, 0x9d, 0x6c, 0xb6, 0x99, 0xcd, 0xb0, 0xeb, 0x1e, 0xe2, 0xb7,
	0x05, 0x20, 0x8b, 0xf4, 0x8d, 0xf2, 0x3c, 0x59, 0x10, 0x46, 0xd0, 0x2e, 0x56, 0x9a, 0xb3, 0x31,
	0x8b, 0x3b, 0x6a, 0x7f, 0x44, 0x84, 0x8e, 0x4e, 0x6c, 0xc2, 0x5b, 0x63, 0x16, 0xf7, 0x95, 0x3b,
	0xe3, 0x03, 0x0c, 0x68, 0x47, 0xc6, 0x7e, 0xfc, 0x6c, 0x56, 0x66, 0xc1, 0xdb, 0x63, 0x16, 0x0f,
	0xa6, 0x78, 0x08, 0x9e, 0xcc, 0x4f, 0x8c, 0x0c, 0x94, 0x2f, 0xc4, 0x47, 0x18, 0xba, 0xb1, 0x7c,
	0x1b, 0xef, 0x38, 0xe3, 0x85, 0x6f, 0x2c, 0x29, 0x19, 0xa8, 0x33, 0x29, 0x3e, 0xc3, 0xc8, 0xcd,
	0x9f, 0x39, 0x6d, 0x5f, 0xb4, 0x26, 0xcd, 0xbb, 0xce, 0x7c, 0xe9, 0x9b, 0x2b, 0x52, 0x06, 0xaa,
	0x26, 0xc7, 0x39, 0x44, 0x15, 0xa2, 0x68, 0x9d, 0xed, 0x48, 0xf3, 0x9e, 0x8b, 0xb8, 0xaa, 0x47,
	0x94, 0xb4, 0x0c, 0x54, 0xc3, 0x52, 0xc5, 0xcc, 0x96, 0x89, 0x31, 0xf4, 0xfd, 0x4e, 0x64, 0x78,
	0xd8, 0x8c, 0xf1, 0xe8, 0x2a, 0xc6, 0xc3, 0x5e, 0x43, 0xe8, 0x3a, 0x4c, 0xdc, 0xc0, 0xc0, 0x2b,
	0x0c, 0x39, 0x84, 0xb9, 0x4d, 0xb6, 0x96, 0x0e, 0x3b, 0xf8, 0xa7, 0x8e, 0xa3, 0x88, 0x61, 0xe8,
	0x17, 0xb4, 0x57, 0xae, 0xcb, 0x1a, 0x99, 0x5b, 0xcd, 0x71, 0x14, 0x11, 0x8c, 0xce, 0xdb, 0x10,
	0x08, 0x51, 0xfd, 0x72, 0x15, 0xe6, 0x7d, 0xd5, 0xf4, 0x09, 0xda, 0xb2, 0x48, 0xf1, 0x1e, 0xc2,
	0x59, 0x66, 0x0c, 0x7d, 0x59, 0xfc, 0x5f, 0x5e, 0xea, 0xf4, 0x8b, 0x5c, 0x37, 0x21, 0x11, 0xc4,
	0xec, 0x96, 0xa5, 0x3d, 0x87, 0xdf, 0xfd, 0x05, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x5d, 0x4d, 0x43,
	0x65, 0x02, 0x00, 0x00,
}
